# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block, everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

if command -v nvim >/dev/null 2>&1; then
    export EDITOR="$(which nvim)"
    export SUDO_EDITOR="$(which nvim)"
elif command -v vim >/dev/null 2>&1; then
    export EDITOR="$(which vim)"
    export SUDO_EDITOR="$(which vim)"
else
    export EDITOR=vi
    export SUDO_EDITOR=vi
fi

export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="powerlevel10k/powerlevel10k"

# -----------------------------------------------------
# oh-myzsh plugins
# -----------------------------------------------------
plugins=(
    git
    sudo
    web-search
    archlinux
    zsh-autosuggestions
    zsh-syntax-highlighting
    fast-syntax-highlighting
    copyfile
    copybuffer
    dirhistory
)

if command -v brew >/dev/null 2>&1; then
    plugins+=(brew)
fi

if command -v node >/dev/null 2>&1; then
    plugins+=(node)
fi

if command -v nvm >/dev/null 2>&1; then
    plugins+=(nvm)
fi

if command -v docker >/dev/null 2>&1; then
    plugins+=(docker docker-compose)
fi

# Set-up oh-my-zsh
source $ZSH/oh-my-zsh.sh

# -----------------------------------------------------
# Set-up FZF key bindings (CTRL R for fuzzy history finder)
# -----------------------------------------------------
source <(fzf --zsh)

# zsh history
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt appendhistory

# nvim manual installation
export PATH="$PATH:/opt/nvim/bin"

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR="$(which nvim)"
  export SUDO_EDITOR="$(which nvim)"
fi


# Aliases
alias ll="ls -lah"
if command -v eza >/dev/null 2>&1; then
    alias ls='eza -a --icons=always'
    alias ll='eza -al --icons=always'
    alias lt='eza -a --tree --level=1 --icons=always'
fi
alias yt-dlp-best="yt-dlp --external-downloader=aria2c --external-downloader-args '--min-split-size=1M --max-connection-per-server=16 --max-concurrent-downloads=16 --split=16' -f '(bestvideo+bestaudio/best)' --merge-output-format 'mkv'"
alias sshzeus="ssh nick@192.168.1.5"
alias drma='docker rm -f $(docker ps -a -q)'

# take ownership and set permissions to 775 for dirs and 664 for files 
alias fixperms='sudo chown -R $(whoami):$(whoami) . && sudo chmod -R a=,a+rX,u+w,g+w .'

alias lg='lazygit'
alias hl='rg --passthrough'

# neovim
alias v="nvim"
alias vi="nvim"
alias vim="nvim"
alias vimdiff="nvim -d"

function upd() {
  if [[ $OSTYPE == "linux"* ]]; then
    if command -v paru >/dev/null 2>&1; then
      paru -Syu --noconfirm
    elif command -v pacman >/dev/null 2>&1; then
      sudo pacman -Syu --noconfirm
    elif command -v apt >/dev/null 2>&1; then
      sudo apt update && sudo apt upgrade -y && sudo apt autoremove -y
    fi
  fi
  if [[ $OSTYPE == "darwin"* && $(command -v brew) != "" ]]; then
    brew update && brew upgrade
  fi
  if [[ ( $OSTYPE == "linux"* || $OSTYPE == "darwin"*) && $(which rustup) == *"rustup" ]]; then
    rustup update
  fi
  if [[ ( $OSTYPE == "linux"* || $OSTYPE == "darwin"*) && $(which tldr) == *"tldr" ]]; then
    tldr -u
  fi
}

# kill anything taking up the specified port, usage example: killport 6060
function killport() {
  sudo lsof -i :$1 | grep LISTEN | awk '{ print $2 }' | xargs kill -9
}

# https://yazi-rs.github.io/docs/quick-start
# yazi wrapper that provides the ability to change the current working directory when exiting Yazi.
function y() {
    local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
    yazi "$@" --cwd-file="$tmp"
    if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
        builtin cd -- "$cwd"
    fi
    rm -f -- "$tmp"
}

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# The next line updates PATH for the Google Cloud SDK.
if [ -f "$HOME/google-cloud-sdk/path.zsh.inc" ]; then . "$HOME/google-cloud-sdk/path.zsh.inc"; fi

# The next line enables shell command completion for gcloud.
if [ -f "$HOME/google-cloud-sdk/completion.zsh.inc" ]; then . "$HOME/google-cloud-sdk/completion.zsh.inc"; fi

# adding ~/.local/bin to path (for things like getnf)
export PATH="$HOME/.local/bin:$PATH"

# setup nvm
[[ -d "$HOME/.nvm" ]] && export NVM_DIR="$HOME/.nvm"
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && . "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && . "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

# THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion


export PASSWORD_STORE_ENABLE_EXTENSIONS=true


# Add Rust's cargo bin to PATH if it's not already there
if [[ ":$PATH:" != *":$HOME/.cargo/bin:"* ]]; then
    export PATH="$HOME/.cargo/bin:$PATH"
fi

# bun completions
[ -s "$HOME/.bun/_bun" ] && source "$HOME/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

### MANAGED BY RANCHER DESKTOP START (DO NOT EDIT)
export PATH="$HOME/.rd/bin:$PATH"

# nvim manual installation
export PATH="$PATH:/opt/nvim/bin"

if command -v brew >/dev/null 2>&1; then
    export LIBRARY_PATH="$LIBRARY_PATH:$(brew --prefix)/lib"
    export PATH="/opt/homebrew/opt/ruby/bin:$PATH"
fi

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/Users/nick/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/Users/nick/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/Users/nick/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/Users/nick/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

export PATH="/opt/homebrew/opt/postgresql@17/bin:$PATH"
export LDFLAGS="-L/opt/homebrew/opt/postgresql@17/lib"
export CPPFLAGS="-I/opt/homebrew/opt/postgresql@17/include"

# Added by LM Studio CLI (lms)
export PATH="$PATH:/Users/nick/.lmstudio/bin"

# pnpm
export PNPM_HOME="/Users/nick/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end
export PATH="$HOME/bin:$PATH"
eval "$(zoxide init --cmd cd zsh)"
